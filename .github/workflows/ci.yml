name: ci

on:
  # push:
  #   branches:
  #     - main
  schedule:
    - cron: "*/20 * * * *"

jobs:
  autogreen:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for .git logs

      - name: Setup Python environment
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Run Python script
        run: |
          pip install -r requirements.txt
          python script.py

      - name: Auto green
        env:
          USER_EMAIL: ${{ secrets.EMAIL }}
        run: |
          # Stash any uncommitted changes before attempting to pull
          git stash save --quiet --include-untracked

          # Configure Git user and perform pull
          git config --local user.email "$USER_EMAIL"
          git config --local user.name "${{ github.actor }}"
          git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git pull

          # Pop the stash to restore any uncommitted changes
          git stash pop --quiet

          # Check if README.md has been modified by the script
          if [[ -n "$(git status --porcelain | grep README.md)" ]]; then
            git add README.md
            messages=("Updated README with new data" "Added information from script output")
            idx=$((RANDOM % ${#messages[@]}))
            COMMIT_MESSAGE="${messages[$idx]}"
            git commit -m "$COMMIT_MESSAGE"
            git push
          else
            # If no files were modified, make an empty commit
            git add .
            COMMIT_MESSAGE="Automated commit"
            git commit --allow-empty -m "$COMMIT_MESSAGE"
            git push
          fi
